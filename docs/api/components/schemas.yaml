# Error Response
ErrorResponse:
  type: object
  properties:
    error:
      type: string
      description: Error type or category
      example: "validation_error"
    message:
      type: string
      description: Human-readable error message
      example: "Invalid scooter ID format. Expected UUID format."
    code:
      type: integer
      description: HTTP status code
      example: 400
    details:
      type: object
      description: Additional error information
      example:
        field: "id"
        value: "invalid-uuid"
        constraint: "must be valid UUID format"
    timestamp:
      type: string
      format: date-time
      description: Timestamp when the error occurred
      example: "2024-01-15T14:30:00Z"
    request_id:
      type: string
      description: Unique identifier for the request
      example: "req_1234567890abcdef"
  required:
    - error
    - message
    - code
    - timestamp

# Validation Error Response
ValidationErrorResponse:
  allOf:
    - $ref: '#/ErrorResponse'
    - type: object
      properties:
        error:
          example: "validation_error"
        message:
          example: "Request validation failed"
        code:
          example: 400
        details:
          type: object
          properties:
            field_errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "lat"
                  message:
                    type: string
                    example: "latitude must be between -90 and 90"
                  value:
                    type: string
                    example: "95.5"
              example:
                - field: "lat"
                  message: "latitude must be between -90 and 90"
                  value: "95.5"
                - field: "radius"
                  message: "radius must be between 1 and 10000 meters"
                  value: "15000"

# Not Found Error Response
NotFoundErrorResponse:
  allOf:
    - $ref: '#/ErrorResponse'
    - type: object
      properties:
        error:
          example: "not_found"
        message:
          example: "Scooter not found"
        code:
          example: 404
        details:
          type: object
          properties:
            resource:
              type: string
              example: "scooter"
            id:
              type: string
              example: "550e8400-e29b-41d4-a716-446655440000"
          example:
            resource: "scooter"
            id: "550e8400-e29b-41d4-a716-446655440000"

# Authentication Error Response
AuthErrorResponse:
  allOf:
    - $ref: '#/ErrorResponse'
    - type: object
      properties:
        error:
          example: "unauthorized"
        message:
          example: "Invalid or missing API key"
        code:
          example: 401
        details:
          type: object
          properties:
            reason:
              type: string
              example: "missing_api_key"
            hint:
              type: string
              example: "Include 'Authorization: Bearer YOUR_API_KEY' header"
          example:
            reason: "missing_api_key"
            hint: "Include 'Authorization: Bearer YOUR_API_KEY' header"

# Internal Server Error Response
InternalErrorResponse:
  allOf:
    - $ref: '#/ErrorResponse'
    - type: object
      properties:
        error:
          example: "internal_error"
        message:
          example: "An unexpected error occurred"
        code:
          example: 500
        details:
          type: object
          properties:
            error_id:
              type: string
              example: "err_abc123def456"
            suggestion:
              type: string
              example: "Please try again later or contact support if the problem persists"
          example:
            error_id: "err_abc123def456"
            suggestion: "Please try again later or contact support if the problem persists"

# Health Check Response
HealthResponse:
  type: object
  properties:
    status:
      type: string
      example: "healthy"
    service:
      type: string
      example: "scootin-aboot"
  required:
    - status
    - service

# Location Schema
Location:
  type: object
  properties:
    latitude:
      type: number
      format: float
      minimum: -90
      maximum: 90
      description: Latitude coordinate
      example: 45.4215
    longitude:
      type: number
      format: float
      minimum: -180
      maximum: 180
      description: Longitude coordinate
      example: -75.6972
  required:
    - latitude
    - longitude

# Scooter Schemas
ScooterInfo:
  type: object
  properties:
    id:
      type: string
      format: uuid
      description: Unique identifier of the scooter
      example: "550e8400-e29b-41d4-a716-446655440000"
    status:
      type: string
      enum: [available, occupied, maintenance, offline]
      description: Current status of the scooter
      example: "available"
    current_latitude:
      type: number
      format: float
      minimum: -90
      maximum: 90
      description: Current latitude of the scooter
      example: 45.4215
    current_longitude:
      type: number
      format: float
      minimum: -180
      maximum: 180
      description: Current longitude of the scooter
      example: -75.6972
    last_seen:
      type: string
      format: date-time
      description: Timestamp when the scooter was last seen
      example: "2024-01-15T14:30:00Z"
    created_at:
      type: string
      format: date-time
      description: Timestamp when the scooter was created
      example: "2024-01-01T00:00:00Z"
  required:
    - id
    - status
    - current_latitude
    - current_longitude
    - last_seen
    - created_at

ScooterDetailsResponse:
  allOf:
    - $ref: '#/ScooterInfo'
    - type: object
      properties:
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the scooter was last updated
          example: "2024-01-15T14:30:00Z"
        active_trip:
          type: object
          properties:
            trip_id:
              type: string
              format: uuid
              description: Unique identifier of the trip
              example: "123e4567-e89b-12d3-a456-426614174000"
            user_id:
              type: string
              format: uuid
              description: Unique identifier of the user
              example: "987fcdeb-51a2-43d7-8f9e-123456789abc"
            start_time:
              type: string
              format: date-time
              description: Timestamp when the trip started
              example: "2024-01-15T14:25:00Z"
            start_latitude:
              type: number
              format: float
              description: Latitude where the trip started
              example: 45.4215
            start_longitude:
              type: number
              format: float
              description: Longitude where the trip started
              example: -75.6972
          required:
            - trip_id
            - user_id
            - start_time
            - start_latitude
            - start_longitude
          description: Active trip information if scooter is occupied
      required:
        - updated_at

ScooterListResponse:
  type: object
  properties:
    scooters:
      type: array
      items:
        $ref: '#/ScooterInfo'
      description: List of scooters
    total:
      type: integer
      format: int64
      description: Total number of scooters matching the query
      example: 25
    limit:
      type: integer
      description: Maximum number of scooters returned
      example: 50
    offset:
      type: integer
      description: Number of scooters skipped
      example: 0
  required:
    - scooters
    - total
    - limit
    - offset

ScooterWithDistance:
  allOf:
    - $ref: '#/ScooterInfo'
    - type: object
      properties:
        distance_meters:
          type: number
          format: float
          description: Distance from the search center in meters
          example: 245.7
      required:
        - distance_meters

ClosestScootersResponse:
  type: object
  properties:
    scooters:
      type: array
      items:
        $ref: '#/ScooterWithDistance'
      description: List of scooters sorted by distance
    center:
      $ref: '#/Location'
      description: Center point of the search
    radius_meters:
      type: number
      format: float
      description: Search radius in meters
      example: 1000.0
  required:
    - scooters
    - center
    - radius_meters
